{
  "version": 3,
  "sources": ["../../node_modules/echarts/lib/data/helper/SeriesDataSchema.js", "../../node_modules/echarts/lib/data/helper/dataStackHelper.js", "../../node_modules/echarts/lib/util/vendor.js"],
  "sourcesContent": ["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\n\r\n/**\r\n * AUTO-GENERATED FILE. DO NOT MODIFY.\r\n */\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\nimport { createHashMap, isObject, retrieve2 } from 'zrender/lib/core/util.js';\r\nimport { makeInner } from '../../util/model.js';\r\nimport { shouldRetrieveDataByName } from '../Source.js';\r\nvar inner = makeInner();\r\nvar dimTypeShort = {\r\n  float: 'f',\r\n  int: 'i',\r\n  ordinal: 'o',\r\n  number: 'n',\r\n  time: 't'\r\n};\r\n/**\r\n * Represents the dimension requirement of a series.\r\n *\r\n * NOTICE:\r\n * When there are too many dimensions in dataset and many series, only the used dimensions\r\n * (i.e., used by coord sys and declared in `series.encode`) are add to `dimensionDefineList`.\r\n * But users may query data by other unused dimension names.\r\n * In this case, users can only query data if and only if they have defined dimension names\r\n * via ec option, so we provide `getDimensionIndexFromSource`, which only query them from\r\n * `source` dimensions.\r\n */\r\n\r\nvar SeriesDataSchema =\r\n/** @class */\r\nfunction () {\r\n  function SeriesDataSchema(opt) {\r\n    this.dimensions = opt.dimensions;\r\n    this._dimOmitted = opt.dimensionOmitted;\r\n    this.source = opt.source;\r\n    this._fullDimCount = opt.fullDimensionCount;\r\n\r\n    this._updateDimOmitted(opt.dimensionOmitted);\r\n  }\r\n\r\n  SeriesDataSchema.prototype.isDimensionOmitted = function () {\r\n    return this._dimOmitted;\r\n  };\r\n\r\n  SeriesDataSchema.prototype._updateDimOmitted = function (dimensionOmitted) {\r\n    this._dimOmitted = dimensionOmitted;\r\n\r\n    if (!dimensionOmitted) {\r\n      return;\r\n    }\r\n\r\n    if (!this._dimNameMap) {\r\n      this._dimNameMap = ensureSourceDimNameMap(this.source);\r\n    }\r\n  };\r\n  /**\r\n   * @caution Can only be used when `dimensionOmitted: true`.\r\n   *\r\n   * Get index by user defined dimension name (i.e., not internal generate name).\r\n   * That is, get index from `dimensionsDefine`.\r\n   * If no `dimensionsDefine`, or no name get, return -1.\r\n   */\r\n\r\n\r\n  SeriesDataSchema.prototype.getSourceDimensionIndex = function (dimName) {\r\n    return retrieve2(this._dimNameMap.get(dimName), -1);\r\n  };\r\n  /**\r\n   * @caution Can only be used when `dimensionOmitted: true`.\r\n   *\r\n   * Notice: may return `null`/`undefined` if user not specify dimension names.\r\n   */\r\n\r\n\r\n  SeriesDataSchema.prototype.getSourceDimension = function (dimIndex) {\r\n    var dimensionsDefine = this.source.dimensionsDefine;\r\n\r\n    if (dimensionsDefine) {\r\n      return dimensionsDefine[dimIndex];\r\n    }\r\n  };\r\n\r\n  SeriesDataSchema.prototype.makeStoreSchema = function () {\r\n    var dimCount = this._fullDimCount;\r\n    var willRetrieveDataByName = shouldRetrieveDataByName(this.source);\r\n    var makeHashStrict = !shouldOmitUnusedDimensions(dimCount); // If source don't have dimensions or series don't omit unsed dimensions.\r\n    // Generate from seriesDimList directly\r\n\r\n    var dimHash = '';\r\n    var dims = [];\r\n\r\n    for (var fullDimIdx = 0, seriesDimIdx = 0; fullDimIdx < dimCount; fullDimIdx++) {\r\n      var property = void 0;\r\n      var type = void 0;\r\n      var ordinalMeta = void 0;\r\n      var seriesDimDef = this.dimensions[seriesDimIdx]; // The list has been sorted by `storeDimIndex` asc.\r\n\r\n      if (seriesDimDef && seriesDimDef.storeDimIndex === fullDimIdx) {\r\n        property = willRetrieveDataByName ? seriesDimDef.name : null;\r\n        type = seriesDimDef.type;\r\n        ordinalMeta = seriesDimDef.ordinalMeta;\r\n        seriesDimIdx++;\r\n      } else {\r\n        var sourceDimDef = this.getSourceDimension(fullDimIdx);\r\n\r\n        if (sourceDimDef) {\r\n          property = willRetrieveDataByName ? sourceDimDef.name : null;\r\n          type = sourceDimDef.type;\r\n        }\r\n      }\r\n\r\n      dims.push({\r\n        property: property,\r\n        type: type,\r\n        ordinalMeta: ordinalMeta\r\n      }); // If retrieving data by index,\r\n      //   use <index, type, ordinalMeta> to determine whether data can be shared.\r\n      //   (Because in this case there might be no dimension name defined in dataset, but indices always exists).\r\n      //   (Indices are always 0, 1, 2, ..., so we can ignore them to shorten the hash).\r\n      // Otherwise if retrieving data by property name (like `data: [{aa: 123, bb: 765}, ...]`),\r\n      //   use <property, type, ordinalMeta> in hash.\r\n\r\n      if (willRetrieveDataByName && property != null // For data stack, we have make sure each series has its own dim on this store.\r\n      // So we do not add property to hash to make sure they can share this store.\r\n      && (!seriesDimDef || !seriesDimDef.isCalculationCoord)) {\r\n        dimHash += makeHashStrict // Use escape character '`' in case that property name contains '$'.\r\n        ? property.replace(/\\`/g, '`1').replace(/\\$/g, '`2') // For better performance, when there are large dimensions, tolerant this defects that hardly meet.\r\n        : property;\r\n      }\r\n\r\n      dimHash += '$';\r\n      dimHash += dimTypeShort[type] || 'f';\r\n\r\n      if (ordinalMeta) {\r\n        dimHash += ordinalMeta.uid;\r\n      }\r\n\r\n      dimHash += '$';\r\n    } // Source from endpoint(usually series) will be read differently\r\n    // when seriesLayoutBy or startIndex(which is affected by sourceHeader) are different.\r\n    // So we use this three props as key.\r\n\r\n\r\n    var source = this.source;\r\n    var hash = [source.seriesLayoutBy, source.startIndex, dimHash].join('$$');\r\n    return {\r\n      dimensions: dims,\r\n      hash: hash\r\n    };\r\n  };\r\n\r\n  SeriesDataSchema.prototype.makeOutputDimensionNames = function () {\r\n    var result = [];\r\n\r\n    for (var fullDimIdx = 0, seriesDimIdx = 0; fullDimIdx < this._fullDimCount; fullDimIdx++) {\r\n      var name_1 = void 0;\r\n      var seriesDimDef = this.dimensions[seriesDimIdx]; // The list has been sorted by `storeDimIndex` asc.\r\n\r\n      if (seriesDimDef && seriesDimDef.storeDimIndex === fullDimIdx) {\r\n        if (!seriesDimDef.isCalculationCoord) {\r\n          name_1 = seriesDimDef.name;\r\n        }\r\n\r\n        seriesDimIdx++;\r\n      } else {\r\n        var sourceDimDef = this.getSourceDimension(fullDimIdx);\r\n\r\n        if (sourceDimDef) {\r\n          name_1 = sourceDimDef.name;\r\n        }\r\n      }\r\n\r\n      result.push(name_1);\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  SeriesDataSchema.prototype.appendCalculationDimension = function (dimDef) {\r\n    this.dimensions.push(dimDef);\r\n    dimDef.isCalculationCoord = true;\r\n    this._fullDimCount++; // If append dimension on a data store, consider the store\r\n    // might be shared by different series, series dimensions not\r\n    // really map to store dimensions.\r\n\r\n    this._updateDimOmitted(true);\r\n  };\r\n\r\n  return SeriesDataSchema;\r\n}();\r\n\r\nexport { SeriesDataSchema };\r\nexport function isSeriesDataSchema(schema) {\r\n  return schema instanceof SeriesDataSchema;\r\n}\r\nexport function createDimNameMap(dimsDef) {\r\n  var dataDimNameMap = createHashMap();\r\n\r\n  for (var i = 0; i < (dimsDef || []).length; i++) {\r\n    var dimDefItemRaw = dimsDef[i];\r\n    var userDimName = isObject(dimDefItemRaw) ? dimDefItemRaw.name : dimDefItemRaw;\r\n\r\n    if (userDimName != null && dataDimNameMap.get(userDimName) == null) {\r\n      dataDimNameMap.set(userDimName, i);\r\n    }\r\n  }\r\n\r\n  return dataDimNameMap;\r\n}\r\nexport function ensureSourceDimNameMap(source) {\r\n  var innerSource = inner(source);\r\n  return innerSource.dimNameMap || (innerSource.dimNameMap = createDimNameMap(source.dimensionsDefine));\r\n}\r\nexport function shouldOmitUnusedDimensions(dimCount) {\r\n  return dimCount > 30;\r\n}", "\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\n\r\n/**\r\n * AUTO-GENERATED FILE. DO NOT MODIFY.\r\n */\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\nimport { each, isString } from 'zrender/lib/core/util.js';\r\nimport { isSeriesDataSchema } from './SeriesDataSchema.js';\r\n/**\r\n * Note that it is too complicated to support 3d stack by value\r\n * (have to create two-dimension inverted index), so in 3d case\r\n * we just support that stacked by index.\r\n *\r\n * @param seriesModel\r\n * @param dimensionsInput The same as the input of <module:echarts/data/SeriesData>.\r\n *        The input will be modified.\r\n * @param opt\r\n * @param opt.stackedCoordDimension Specify a coord dimension if needed.\r\n * @param opt.byIndex=false\r\n * @return calculationInfo\r\n * {\r\n *     stackedDimension: string\r\n *     stackedByDimension: string\r\n *     isStackedByIndex: boolean\r\n *     stackedOverDimension: string\r\n *     stackResultDimension: string\r\n * }\r\n */\r\n\r\nexport function enableDataStack(seriesModel, dimensionsInput, opt) {\r\n  opt = opt || {};\r\n  var byIndex = opt.byIndex;\r\n  var stackedCoordDimension = opt.stackedCoordDimension;\r\n  var dimensionDefineList;\r\n  var schema;\r\n  var store;\r\n\r\n  if (isLegacyDimensionsInput(dimensionsInput)) {\r\n    dimensionDefineList = dimensionsInput;\r\n  } else {\r\n    schema = dimensionsInput.schema;\r\n    dimensionDefineList = schema.dimensions;\r\n    store = dimensionsInput.store;\r\n  } // Compatibal: when `stack` is set as '', do not stack.\r\n\r\n\r\n  var mayStack = !!(seriesModel && seriesModel.get('stack'));\r\n  var stackedByDimInfo;\r\n  var stackedDimInfo;\r\n  var stackResultDimension;\r\n  var stackedOverDimension;\r\n  each(dimensionDefineList, function (dimensionInfo, index) {\r\n    if (isString(dimensionInfo)) {\r\n      dimensionDefineList[index] = dimensionInfo = {\r\n        name: dimensionInfo\r\n      };\r\n    }\r\n\r\n    if (mayStack && !dimensionInfo.isExtraCoord) {\r\n      // Find the first ordinal dimension as the stackedByDimInfo.\r\n      if (!byIndex && !stackedByDimInfo && dimensionInfo.ordinalMeta) {\r\n        stackedByDimInfo = dimensionInfo;\r\n      } // Find the first stackable dimension as the stackedDimInfo.\r\n\r\n\r\n      if (!stackedDimInfo && dimensionInfo.type !== 'ordinal' && dimensionInfo.type !== 'time' && (!stackedCoordDimension || stackedCoordDimension === dimensionInfo.coordDim)) {\r\n        stackedDimInfo = dimensionInfo;\r\n      }\r\n    }\r\n  });\r\n\r\n  if (stackedDimInfo && !byIndex && !stackedByDimInfo) {\r\n    // Compatible with previous design, value axis (time axis) only stack by index.\r\n    // It may make sense if the user provides elaborately constructed data.\r\n    byIndex = true;\r\n  } // Add stack dimension, they can be both calculated by coordinate system in `unionExtent`.\r\n  // That put stack logic in List is for using conveniently in echarts extensions, but it\r\n  // might not be a good way.\r\n\r\n\r\n  if (stackedDimInfo) {\r\n    // Use a weird name that not duplicated with other names.\r\n    // Also need to use seriesModel.id as postfix because different\r\n    // series may share same data store. The stack dimension needs to be distinguished.\r\n    stackResultDimension = '__\\0ecstackresult_' + seriesModel.id;\r\n    stackedOverDimension = '__\\0ecstackedover_' + seriesModel.id; // Create inverted index to fast query index by value.\r\n\r\n    if (stackedByDimInfo) {\r\n      stackedByDimInfo.createInvertedIndices = true;\r\n    }\r\n\r\n    var stackedDimCoordDim_1 = stackedDimInfo.coordDim;\r\n    var stackedDimType = stackedDimInfo.type;\r\n    var stackedDimCoordIndex_1 = 0;\r\n    each(dimensionDefineList, function (dimensionInfo) {\r\n      if (dimensionInfo.coordDim === stackedDimCoordDim_1) {\r\n        stackedDimCoordIndex_1++;\r\n      }\r\n    });\r\n    var stackedOverDimensionDefine = {\r\n      name: stackResultDimension,\r\n      coordDim: stackedDimCoordDim_1,\r\n      coordDimIndex: stackedDimCoordIndex_1,\r\n      type: stackedDimType,\r\n      isExtraCoord: true,\r\n      isCalculationCoord: true,\r\n      storeDimIndex: dimensionDefineList.length\r\n    };\r\n    var stackResultDimensionDefine = {\r\n      name: stackedOverDimension,\r\n      // This dimension contains stack base (generally, 0), so do not set it as\r\n      // `stackedDimCoordDim` to avoid extent calculation, consider log scale.\r\n      coordDim: stackedOverDimension,\r\n      coordDimIndex: stackedDimCoordIndex_1 + 1,\r\n      type: stackedDimType,\r\n      isExtraCoord: true,\r\n      isCalculationCoord: true,\r\n      storeDimIndex: dimensionDefineList.length + 1\r\n    };\r\n\r\n    if (schema) {\r\n      if (store) {\r\n        stackedOverDimensionDefine.storeDimIndex = store.ensureCalculationDimension(stackedOverDimension, stackedDimType);\r\n        stackResultDimensionDefine.storeDimIndex = store.ensureCalculationDimension(stackResultDimension, stackedDimType);\r\n      }\r\n\r\n      schema.appendCalculationDimension(stackedOverDimensionDefine);\r\n      schema.appendCalculationDimension(stackResultDimensionDefine);\r\n    } else {\r\n      dimensionDefineList.push(stackedOverDimensionDefine);\r\n      dimensionDefineList.push(stackResultDimensionDefine);\r\n    }\r\n  }\r\n\r\n  return {\r\n    stackedDimension: stackedDimInfo && stackedDimInfo.name,\r\n    stackedByDimension: stackedByDimInfo && stackedByDimInfo.name,\r\n    isStackedByIndex: byIndex,\r\n    stackedOverDimension: stackedOverDimension,\r\n    stackResultDimension: stackResultDimension\r\n  };\r\n}\r\n\r\nfunction isLegacyDimensionsInput(dimensionsInput) {\r\n  return !isSeriesDataSchema(dimensionsInput.schema);\r\n}\r\n\r\nexport function isDimensionStacked(data, stackedDim) {\r\n  // Each single series only maps to one pair of axis. So we do not need to\r\n  // check stackByDim, whatever stacked by a dimension or stacked by index.\r\n  return !!stackedDim && stackedDim === data.getCalculationInfo('stackedDimension');\r\n}\r\nexport function getStackedDimension(data, targetDim) {\r\n  return isDimensionStacked(data, targetDim) ? data.getCalculationInfo('stackResultDimension') : targetDim;\r\n}", "\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\n\r\n/**\r\n * AUTO-GENERATED FILE. DO NOT MODIFY.\r\n */\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\nimport { isArray } from 'zrender/lib/core/util.js';\r\n/* global Float32Array */\r\n\r\nvar supportFloat32Array = typeof Float32Array !== 'undefined';\r\nvar Float32ArrayCtor = !supportFloat32Array ? Array : Float32Array;\r\nexport function createFloat32Array(arg) {\r\n  if (isArray(arg)) {\r\n    // Return self directly if don't support TypedArray.\r\n    return supportFloat32Array ? new Float32Array(arg) : arg;\r\n  } // Else is number\r\n\r\n\r\n  return new Float32ArrayCtor(arg);\r\n}"],
  "mappings": "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",
  "names": ["SeriesDataSchema"]
}
