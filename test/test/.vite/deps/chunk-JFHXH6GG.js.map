{
  "version": 3,
  "sources": ["../../node_modules/echarts/lib/data/DataDiffer.js"],
  "sourcesContent": ["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\n\r\n/**\r\n * AUTO-GENERATED FILE. DO NOT MODIFY.\r\n */\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\nfunction dataIndexMapValueLength(valNumOrArrLengthMoreThan2) {\r\n  return valNumOrArrLengthMoreThan2 == null ? 0 : valNumOrArrLengthMoreThan2.length || 1;\r\n}\r\n\r\nfunction defaultKeyGetter(item) {\r\n  return item;\r\n}\r\n\r\nvar DataDiffer =\r\n/** @class */\r\nfunction () {\r\n  /**\r\n   * @param context Can be visited by this.context in callback.\r\n   */\r\n  function DataDiffer(oldArr, newArr, oldKeyGetter, newKeyGetter, context, // By default: 'oneToOne'.\r\n  diffMode) {\r\n    this._old = oldArr;\r\n    this._new = newArr;\r\n    this._oldKeyGetter = oldKeyGetter || defaultKeyGetter;\r\n    this._newKeyGetter = newKeyGetter || defaultKeyGetter; // Visible in callback via `this.context`;\r\n\r\n    this.context = context;\r\n    this._diffModeMultiple = diffMode === 'multiple';\r\n  }\r\n  /**\r\n   * Callback function when add a data\r\n   */\r\n\r\n\r\n  DataDiffer.prototype.add = function (func) {\r\n    this._add = func;\r\n    return this;\r\n  };\r\n  /**\r\n   * Callback function when update a data\r\n   */\r\n\r\n\r\n  DataDiffer.prototype.update = function (func) {\r\n    this._update = func;\r\n    return this;\r\n  };\r\n  /**\r\n   * Callback function when update a data and only work in `cbMode: 'byKey'`.\r\n   */\r\n\r\n\r\n  DataDiffer.prototype.updateManyToOne = function (func) {\r\n    this._updateManyToOne = func;\r\n    return this;\r\n  };\r\n  /**\r\n   * Callback function when update a data and only work in `cbMode: 'byKey'`.\r\n   */\r\n\r\n\r\n  DataDiffer.prototype.updateOneToMany = function (func) {\r\n    this._updateOneToMany = func;\r\n    return this;\r\n  };\r\n  /**\r\n   * Callback function when update a data and only work in `cbMode: 'byKey'`.\r\n   */\r\n\r\n\r\n  DataDiffer.prototype.updateManyToMany = function (func) {\r\n    this._updateManyToMany = func;\r\n    return this;\r\n  };\r\n  /**\r\n   * Callback function when remove a data\r\n   */\r\n\r\n\r\n  DataDiffer.prototype.remove = function (func) {\r\n    this._remove = func;\r\n    return this;\r\n  };\r\n\r\n  DataDiffer.prototype.execute = function () {\r\n    this[this._diffModeMultiple ? '_executeMultiple' : '_executeOneToOne']();\r\n  };\r\n\r\n  DataDiffer.prototype._executeOneToOne = function () {\r\n    var oldArr = this._old;\r\n    var newArr = this._new;\r\n    var newDataIndexMap = {};\r\n    var oldDataKeyArr = new Array(oldArr.length);\r\n    var newDataKeyArr = new Array(newArr.length);\r\n\r\n    this._initIndexMap(oldArr, null, oldDataKeyArr, '_oldKeyGetter');\r\n\r\n    this._initIndexMap(newArr, newDataIndexMap, newDataKeyArr, '_newKeyGetter');\r\n\r\n    for (var i = 0; i < oldArr.length; i++) {\r\n      var oldKey = oldDataKeyArr[i];\r\n      var newIdxMapVal = newDataIndexMap[oldKey];\r\n      var newIdxMapValLen = dataIndexMapValueLength(newIdxMapVal); // idx can never be empty array here. see 'set null' logic below.\r\n\r\n      if (newIdxMapValLen > 1) {\r\n        // Consider there is duplicate key (for example, use dataItem.name as key).\r\n        // We should make sure every item in newArr and oldArr can be visited.\r\n        var newIdx = newIdxMapVal.shift();\r\n\r\n        if (newIdxMapVal.length === 1) {\r\n          newDataIndexMap[oldKey] = newIdxMapVal[0];\r\n        }\r\n\r\n        this._update && this._update(newIdx, i);\r\n      } else if (newIdxMapValLen === 1) {\r\n        newDataIndexMap[oldKey] = null;\r\n        this._update && this._update(newIdxMapVal, i);\r\n      } else {\r\n        this._remove && this._remove(i);\r\n      }\r\n    }\r\n\r\n    this._performRestAdd(newDataKeyArr, newDataIndexMap);\r\n  };\r\n  /**\r\n   * For example, consider the case:\r\n   * oldData: [o0, o1, o2, o3, o4, o5, o6, o7],\r\n   * newData: [n0, n1, n2, n3, n4, n5, n6, n7, n8],\r\n   * Where:\r\n   *     o0, o1, n0 has key 'a' (many to one)\r\n   *     o5, n4, n5, n6 has key 'b' (one to many)\r\n   *     o2, n1 has key 'c' (one to one)\r\n   *     n2, n3 has key 'd' (add)\r\n   *     o3, o4 has key 'e' (remove)\r\n   *     o6, o7, n7, n8 has key 'f' (many to many, treated as add and remove)\r\n   * Then:\r\n   *     (The order of the following directives are not ensured.)\r\n   *     this._updateManyToOne(n0, [o0, o1]);\r\n   *     this._updateOneToMany([n4, n5, n6], o5);\r\n   *     this._update(n1, o2);\r\n   *     this._remove(o3);\r\n   *     this._remove(o4);\r\n   *     this._remove(o6);\r\n   *     this._remove(o7);\r\n   *     this._add(n2);\r\n   *     this._add(n3);\r\n   *     this._add(n7);\r\n   *     this._add(n8);\r\n   */\r\n\r\n\r\n  DataDiffer.prototype._executeMultiple = function () {\r\n    var oldArr = this._old;\r\n    var newArr = this._new;\r\n    var oldDataIndexMap = {};\r\n    var newDataIndexMap = {};\r\n    var oldDataKeyArr = [];\r\n    var newDataKeyArr = [];\r\n\r\n    this._initIndexMap(oldArr, oldDataIndexMap, oldDataKeyArr, '_oldKeyGetter');\r\n\r\n    this._initIndexMap(newArr, newDataIndexMap, newDataKeyArr, '_newKeyGetter');\r\n\r\n    for (var i = 0; i < oldDataKeyArr.length; i++) {\r\n      var oldKey = oldDataKeyArr[i];\r\n      var oldIdxMapVal = oldDataIndexMap[oldKey];\r\n      var newIdxMapVal = newDataIndexMap[oldKey];\r\n      var oldIdxMapValLen = dataIndexMapValueLength(oldIdxMapVal);\r\n      var newIdxMapValLen = dataIndexMapValueLength(newIdxMapVal);\r\n\r\n      if (oldIdxMapValLen > 1 && newIdxMapValLen === 1) {\r\n        this._updateManyToOne && this._updateManyToOne(newIdxMapVal, oldIdxMapVal);\r\n        newDataIndexMap[oldKey] = null;\r\n      } else if (oldIdxMapValLen === 1 && newIdxMapValLen > 1) {\r\n        this._updateOneToMany && this._updateOneToMany(newIdxMapVal, oldIdxMapVal);\r\n        newDataIndexMap[oldKey] = null;\r\n      } else if (oldIdxMapValLen === 1 && newIdxMapValLen === 1) {\r\n        this._update && this._update(newIdxMapVal, oldIdxMapVal);\r\n        newDataIndexMap[oldKey] = null;\r\n      } else if (oldIdxMapValLen > 1 && newIdxMapValLen > 1) {\r\n        this._updateManyToMany && this._updateManyToMany(newIdxMapVal, oldIdxMapVal);\r\n        newDataIndexMap[oldKey] = null;\r\n      } else if (oldIdxMapValLen > 1) {\r\n        for (var i_1 = 0; i_1 < oldIdxMapValLen; i_1++) {\r\n          this._remove && this._remove(oldIdxMapVal[i_1]);\r\n        }\r\n      } else {\r\n        this._remove && this._remove(oldIdxMapVal);\r\n      }\r\n    }\r\n\r\n    this._performRestAdd(newDataKeyArr, newDataIndexMap);\r\n  };\r\n\r\n  DataDiffer.prototype._performRestAdd = function (newDataKeyArr, newDataIndexMap) {\r\n    for (var i = 0; i < newDataKeyArr.length; i++) {\r\n      var newKey = newDataKeyArr[i];\r\n      var newIdxMapVal = newDataIndexMap[newKey];\r\n      var idxMapValLen = dataIndexMapValueLength(newIdxMapVal);\r\n\r\n      if (idxMapValLen > 1) {\r\n        for (var j = 0; j < idxMapValLen; j++) {\r\n          this._add && this._add(newIdxMapVal[j]);\r\n        }\r\n      } else if (idxMapValLen === 1) {\r\n        this._add && this._add(newIdxMapVal);\r\n      } // Support both `newDataKeyArr` are duplication removed or not removed.\r\n\r\n\r\n      newDataIndexMap[newKey] = null;\r\n    }\r\n  };\r\n\r\n  DataDiffer.prototype._initIndexMap = function (arr, // Can be null.\r\n  map, // In 'byKey', the output `keyArr` is duplication removed.\r\n  // In 'byIndex', the output `keyArr` is not duplication removed and\r\n  //     its indices are accurately corresponding to `arr`.\r\n  keyArr, keyGetterName) {\r\n    var cbModeMultiple = this._diffModeMultiple;\r\n\r\n    for (var i = 0; i < arr.length; i++) {\r\n      // Add prefix to avoid conflict with Object.prototype.\r\n      var key = '_ec_' + this[keyGetterName](arr[i], i);\r\n\r\n      if (!cbModeMultiple) {\r\n        keyArr[i] = key;\r\n      }\r\n\r\n      if (!map) {\r\n        continue;\r\n      }\r\n\r\n      var idxMapVal = map[key];\r\n      var idxMapValLen = dataIndexMapValueLength(idxMapVal);\r\n\r\n      if (idxMapValLen === 0) {\r\n        // Simple optimize: in most cases, one index has one key,\r\n        // do not need array.\r\n        map[key] = i;\r\n\r\n        if (cbModeMultiple) {\r\n          keyArr.push(key);\r\n        }\r\n      } else if (idxMapValLen === 1) {\r\n        map[key] = [idxMapVal, i];\r\n      } else {\r\n        idxMapVal.push(i);\r\n      }\r\n    }\r\n  };\r\n\r\n  return DataDiffer;\r\n}();\r\n\r\nexport default DataDiffer;"],
  "mappings": "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",
  "names": ["DataDiffer"]
}
